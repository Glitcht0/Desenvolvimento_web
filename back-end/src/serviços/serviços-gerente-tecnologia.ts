import md5 from "md5";
import { getManager } from "typeorm";
import Usu√°rio, { Status } from "../entidades/usu√°rio";
import GerenteTecnologia from '../entidades/gerente-tecnologia';
import Servi√ßosUsu√°rio from "./servi√ßos-usu√°rio";
import GerenteMineradora from "../entidades/gerente-mineradora"; //üó°Ô∏è
import Patroc√≠nio from "../entidades/patroc√≠nio"; //üó°Ô∏è
import Participa√ß√£oMinera√ß√£o from "../entidades/participa√ß√£o-minera√ß√£o"; //üó°Ô∏è



export default class Servi√ßosGerenteTecnologia  {
constructor() {}

  
  //üó°Ô∏è ------------------1 Altera√ß√£o feita usando Gerente Mineradora ------------------- üó°Ô∏è
static async cadastrarParticipa√ß√£oMinera√ß√£o(request, response) {
  try {
    const { t√≠tulo, categoria, √°rea_atua√ß√£o, data_in√≠cio, descri√ß√£o, resultado, cpf } = request.body;

    const cpf_encriptado = md5(cpf);

    // Buscar gerente mineradora pelo usu√°rio
    const gerente_mineradora = await GerenteMineradora.findOne({ where: { usu√°rio: cpf_encriptado } });
    if (!gerente_mineradora) return response.status(404).json({ erro: "Gerente mineradora n√£o encontrado." });

    // Checar se j√° existe participa√ß√£o igual
    const participa√ß√µesMinera√ß√£o = await Participa√ß√£oMinera√ß√£o.find({
      where: { gerente_mineradora, t√≠tulo }
    });
    if (participa√ß√µesMinera√ß√£o.length > 0) 
      return response.status(404).json({ erro: "O gerente j√° cadastrou essa participa√ß√£o de minera√ß√£o." });

    // Criar participa√ß√£o
    await Participa√ß√£oMinera√ß√£o.create({
      t√≠tulo,
      categoria,
      √°rea_atua√ß√£o,
      data_in√≠cio: new Date(data_in√≠cio),
      descri√ß√£o,
      resultado,
      gerente_mineradora
    }).save();

    return response.json();
  } catch (error) {
    return response.status(500).json({ erro: "Erro BD : cadastrarParticipa√ß√£oMinera√ß√£o" });
  }
};

  //üó°Ô∏è ------------------------------------- üó°Ô∏è



//üó°Ô∏è -----------------2-------------------- üó°Ô∏è
static async removerInteresse(request, response) {
  try {
    const id = request.params.id;
    await Participa√ß√£oMinera√ß√£o.delete(id);
    return response.json();
  } catch (error) { return response.status(500).json({ erro: "Erro BD : Participa√ß√£oMinera√ß√£o" }); }
  };
//üó°Ô∏è ------------------------------------- üó°Ô∏è


//üó°Ô∏è ------------------3------------------- üó°Ô∏è
static async buscarParticipa√ß√µesMinera√ß√£oGerenteTecnologia(request, response) {
  try {
    const cpf_encriptado = md5(request.params.cpf);
    // Buscar participa√ß√µes onde o gerente_mineradora.usu√°rio.cpf = cpf_encriptado
    const interesses = await Participa√ß√£oMinera√ß√£o.createQueryBuilder('p')
      .leftJoinAndSelect('p.gerente_mineradora', 'gm')
      .leftJoinAndSelect('gm.usu√°rio', 'u')
      .leftJoinAndSelect('p.patroc√≠nios', 'pat')
      .leftJoinAndSelect('pat.gerentetecnologia', 'gt')
      .leftJoinAndSelect('gt.usu√°rio', 'gtu')
      .where('u.cpf = :cpf', { cpf: cpf_encriptado })
      .getMany();
    return response.json(interesses);
  } catch (error) { return response.status(500).json({ erro: "Erro BD : buscarParticipa√ß√µesMinera√ß√£oGerente" }); }
};
//üó°Ô∏è ------------------------------------- üó°Ô∏è


//üó°Ô∏è -------------------4------------------ üó°Ô∏è
static async buscarPatroc√≠nios(request, response) {
  try {
    // Retorna patroc√≠nios com informa√ß√µes do gerente de tecnologia e da participa√ß√£o de minera√ß√£o
    const propostas = await Patroc√≠nio.find({ relations: [
      "participa√ß√µes_minera√ß√£o",
      "participa√ß√µes_minera√ß√£o.gerente_mineradora",
      "participa√ß√µes_minera√ß√£o.gerente_mineradora.usu√°rio",
      "gerentetecnologia",
      "gerentetecnologia.usu√°rio"
    ] });
    return response.json(propostas);
  } catch (error) { return response.status(500).json({ erro: "Erro BD : buscarPatroc√≠nios" }); }
  };

//üó°Ô∏è ------------------------------------- üó°Ô∏è




  
  static async cadastrarGerenteTecnologia(request, response) {
    try {
      const { usu√°rio_info, titulacao, ano_ingresso, data_nascimento, telefone } = request.body;
      const { usu√°rio, token } = await Servi√ßosUsu√°rio.cadastrarUsu√°rio(usu√°rio_info);
      const entityManager = getManager();

      await entityManager.transaction(async (transactionManager) => {
        await transactionManager.save(usu√°rio);
        const gerente = GerenteTecnologia.create({ usu√°rio, titulacao, ano_ingresso, data_nascimento, telefone });
        await transactionManager.save(gerente);
        await transactionManager.update(Usu√°rio, usu√°rio.cpf, { status: Status.ATIVO });
        return response.json({ status: Status.ATIVO, token });
      });
    } catch (error) {
      return response.status(500).json({ erro: error });
    }
  }







  static async atualizarGerenteTecnologia(request, response) {
    try {
      const { cpf, titulacao, ano_ingresso, data_nascimento, telefone } = request.body;
      const cpf_encriptado = md5(cpf);
      await GerenteTecnologia.update(
        { usu√°rio: { cpf: cpf_encriptado } },
        { titulacao, ano_ingresso, data_nascimento, telefone }
      );
      return response.json();
    } catch (error) {
      return response.status(500).json({ erro: "Erro BD : atualizarGerenteTecnologia" });
    }
  }



  static async buscarGerenteTecnologia(request, response) {
    console.log("buscarGerenteTecnologia chamado");
    try {
      const cpf_encriptado = md5(request.params.cpf);
      const gerente = await GerenteTecnologia.findOne({
        where: { usu√°rio: cpf_encriptado },
        relations: ["usu√°rio"]
      });
      if (!gerente) return response.status(404).json({ erro: "Gerente de tecnologia n√£o encontrado." });
      
      return response.json({
        nome: gerente.usu√°rio.nome,
        email: gerente.usu√°rio.email,
        titulacao: gerente.titulacao,
        ano_ingresso: gerente.ano_ingresso,
        data_nascimento: gerente.data_nascimento,
        telefone: gerente.telefone
      });
    } catch (error) {
      return response.status(500).json({ erro: "Erro BD : buscarGerenteTecnologia" });
    }
  }
}