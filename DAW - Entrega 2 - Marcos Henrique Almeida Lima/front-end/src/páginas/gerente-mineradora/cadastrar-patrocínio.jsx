// ğŸ”„ alterado: todos os nomes ajustados conforme instruÃ§Ã£o
import { useContext, useEffect, useRef, useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "primereact/button";
import { Card } from "primereact/card";
import { Checkbox } from "primereact/checkbox";
import { Divider } from "primereact/divider";
import { Dropdown } from "primereact/dropdown";
import { InputText } from "primereact/inputtext";
import { InputTextarea } from "primereact/inputtextarea";
import { Toast } from "primereact/toast";
import ContextoUsuÃ¡rio from "../../contextos/contexto-usuÃ¡rio";
import ContextoGerenteMineradora from "../../contextos/contexto-gerente-mineradora"; // ğŸ”„ alterado
import { serviÃ§oAlterarPatrocÃ­nio, serviÃ§oCadastrarPatrocÃ­nio, serviÃ§oRemoverPatrocÃ­nio,
 serviÃ§oBuscarAplicaÃ§ÃµesPrevistasPatrocÃ­nios } from "../../serviÃ§os/serviÃ§os-gerente-mineradora"; // ğŸ”„ alterado
import mostrarToast from "../../utilitÃ¡rios/mostrar-toast";
import { MostrarMensagemErro, checarListaVazia, validarCamposObrigatÃ³rios }
 from "../../utilitÃ¡rios/validaÃ§Ãµes";
import { estilizarBotÃ£o, estilizarBotÃ£oRemover, estilizarBotÃ£oRetornar, estilizarCard,
 estilizarCheckbox, estilizarDivCampo, estilizarDivider, estilizarDropdown, estilizarFlex,
 estilizarInlineFlex, estilizarInputText, estilizarInputTextarea, estilizarLabel }
from "../../utilitÃ¡rios/estilos";

export default function CadastrarPatrocÃ­nio() { // ğŸ”„ alterado
const referÃªnciaToast = useRef(null);
const { usuÃ¡rioLogado } = useContext(ContextoUsuÃ¡rio);
const { patrocÃ­nioConsultado } = useContext(ContextoGerenteMineradora); // ğŸ”„ alterado

const [dados, setDados] = useState({
 nome_empresa: patrocÃ­nioConsultado?.nome_empresa || "",
 estilo_logo: patrocÃ­nioConsultado?.estilo_logo || "",
 aplicaÃ§Ã£o_prevista: patrocÃ­nioConsultado?.aplicaÃ§Ã£o_prevista || "",
 data_inÃ­cio: patrocÃ­nioConsultado?.data_inÃ­cio || "",
 descriÃ§Ã£o: patrocÃ­nioConsultado?.descriÃ§Ã£o || "",
 concorrendo_contrato: patrocÃ­nioConsultado?.concorrendo_contrato || "",
 status_projeto: patrocÃ­nioConsultado?.status_projeto || ""
});

const [listaAplicaÃ§ÃµesPrevistas, setListaAplicaÃ§ÃµesPrevistas] = useState([]);
const [erros, setErros] = useState({});
const navegar = useNavigate();

const opÃ§ÃµesEstiloLogo = [{ label: "minimalista", value: "minimalista" },
 { label: "tipogrÃ¡fico", value: "tipogrÃ¡fico" },
 { label: "vintage", value: "vintage" },
 { label: "abstrato", value: "abstrato" },
 { label: "corporativo", value: "corporativo" },
 { label: "futurista", value: "futurista" },
 { label: "orgÃ¢nico", value: "orgÃ¢nico" },
 { label: "mascote", value: "mascote" }];

const opÃ§ÃµesStatusProjeto = [{ label: "rascunho", value: "rascunho" },
 { label: "em andamento", value: "em andamento" },
 { label: "aprovado", value: "aprovado" },
 { label: "concluÃ­do", value: "concluÃ­do" },
 { label: "cancelado", value: "cancelado" },
 { label: "revisÃ£o", value: "revisÃ£o" }];

function alterarEstado(event) {
 const chave = event.target.name || event.value;
 let valor = event.target.value || event.checked;
 setDados({ ...dados, [chave]: valor });
};

function validarCampos() {
 const { nome_empresa, estilo_logo, aplicaÃ§Ã£o_prevista, data_inÃ­cio, descriÃ§Ã£o } = dados;
 let errosCamposObrigatÃ³rios = validarCamposObrigatÃ³rios({ nome_empresa, estilo_logo, aplicaÃ§Ã£o_prevista, data_inÃ­cio, descriÃ§Ã£o });
 setErros(errosCamposObrigatÃ³rios);
 return checarListaVazia(errosCamposObrigatÃ³rios);
};

function retornarAdministrarPatrocÃ­nios() { // ğŸ”„ alterado
 navegar("../administrar-patrocÃ­nios"); // ğŸ”„ alterado
};

async function cadastrarPatrocÃ­nio() { // ğŸ”„ alterado
 if (validarCampos()) {
  try {
   await serviÃ§oCadastrarPatrocÃ­nio({ ...dados, cpf: usuÃ¡rioLogado.cpf });
   mostrarToast(referÃªnciaToast, "PatrocÃ­nio cadastrado com sucesso!", "sucesso"); // ğŸ”„ alterado
  } catch (error) { mostrarToast(referÃªnciaToast, error.response.data.erro, "error"); }
 }
};

async function alterarPatrocÃ­nio() { // ğŸ”„ alterado
 if (validarCampos()) {
  try {
   await serviÃ§oAlterarPatrocÃ­nio({ ...dados, id: patrocÃ­nioConsultado.id }); // ğŸ”„ alterado
   mostrarToast(referÃªnciaToast, "Proposta alterada com sucesso!", "sucesso");
  } catch (error) { mostrarToast(referÃªnciaToast, error.response.data.erro, "error"); }
 }
};

async function removerPatrocÃ­nio() { // ğŸ”„ alterado
 try {
  await serviÃ§oRemoverPatrocÃ­nio(patrocÃ­nioConsultado.id); // ğŸ”„ alterado
  mostrarToast(referÃªnciaToast, "PatrocÃ­nio excluÃ­do com sucesso!", "sucesso"); // ğŸ”„ alterado
 } catch (error) { mostrarToast(referÃªnciaToast, error.response.data.erro, "error"); }
};

function BotÃµesAÃ§Ãµes() {
 if (patrocÃ­nioConsultado) { // ğŸ”„ alterado
  return (
   <div className={estilizarInlineFlex()}>
    <Button className={estilizarBotÃ£oRetornar()} label="Retornar" onClick={retornarAdministrarPatrocÃ­nios}/>
    <Button className={estilizarBotÃ£oRemover()} label="Remover" onClick={removerPatrocÃ­nio}/>
    <Button className={estilizarBotÃ£o()} label="Alterar" onClick={alterarPatrocÃ­nio}/>
   </div>
  );
 } else {
  return (
   <div className={estilizarInlineFlex()}>
    <Button className={estilizarBotÃ£oRetornar()} label="Retornar" onClick={retornarAdministrarPatrocÃ­nios}/>
    <Button className={estilizarBotÃ£o()} label="Cadastrar" onClick={cadastrarPatrocÃ­nio}/>
   </div>
  );
 }
};

function nomeEmpresaFormulÃ¡rio() {
 if (patrocÃ­nioConsultado) return "Alterar PatrocÃ­nio"; // ğŸ”„ alterado
 else return "Cadastrar PatrocÃ­nio"; // ğŸ”„ alterado
};

useEffect(() => {
 async function buscarAplicaÃ§ÃµesPrevistasPatrocÃ­nios() { // ğŸ”„ alterado
  try {
   const response = await serviÃ§oBuscarAplicaÃ§ÃµesPrevistasPatrocÃ­nios(); // ğŸ”„ alterado
   if (response.data) setListaAplicaÃ§ÃµesPrevistas(response.data);
  } catch (error) {
   const erro = error.response.data.erro;
   if (erro) mostrarToast(referÃªnciaToast, erro, "error");
  }
 }
 buscarAplicaÃ§ÃµesPrevistasPatrocÃ­nios(); // ğŸ”„ alterado
}, [])












return (
<div className={estilizarFlex()}>
<Toast ref={referÃªnciaToast} onHide={retornarAdministrarDesignsLogos} position="bottom-center"/>
<Card title={nomeEmpresaFormulÃ¡rio()} className={estilizarCard(usuÃ¡rioLogado.cor_tema)}>
<div className={estilizarDivCampo()}>
<label className={estilizarLabel(usuÃ¡rioLogado.cor_tema)}>Nome da Empresa*:</label>
<InputText name="nome_empresa"
 className={estilizarInputText(erros.nome_empresa, 400, usuÃ¡rioLogado.cor_tema)}
value={dados.nome_empresa} onChange={alterarEstado}/>
<MostrarMensagemErro mensagem={erros.nome_empresa}/>
</div>
<div className={estilizarDivCampo()}>
<label className={estilizarLabel(usuÃ¡rioLogado.cor_tema)}>Estilo de Logo*:</label>
<Dropdown name="estilo_logo"
 className={estilizarDropdown(erros.estilo_logo, usuÃ¡rioLogado.cor_tema)}
value={dados.estilo_logo} options={opÃ§ÃµesEstiloLogo} onChange={alterarEstado}
 placeholder="-- Selecione --"/>
<MostrarMensagemErro mensagem={erros.estilo_logo}/>
</div>
<div className={estilizarDivCampo()}>
<label className={estilizarLabel(usuÃ¡rioLogado.cor_tema)}>
 AplicaÃ§Ãµes Previstas Cadastradas:</label>
<Dropdown name="aplicaÃ§Ã£o_prevista" placeholder="-- Selecione --" showClear
className={estilizarDropdown(erros.aplicaÃ§Ã£o_prevista, usuÃ¡rioLogado.cor_tema)} filter
options={listaAplicaÃ§ÃµesPrevistas} onChange={alterarEstado}
 emptyMessage={"Nenhuma aplicaÃ§Ã£o prevista cadastrada."}/>
</div>
<div className={estilizarDivCampo()}>
<label className={estilizarLabel(usuÃ¡rioLogado.cor_tema)}>AplicaÃ§Ã£o Prevista*:</label>
<InputText name="aplicaÃ§Ã£o_prevista"
 className={estilizarInputText(erros.aplicaÃ§Ã£o_prevista, 200, usuÃ¡rioLogado.cor_tema)}
value={dados.aplicaÃ§Ã£o_prevista} onChange={alterarEstado}/>
<MostrarMensagemErro mensagem={erros.aplicaÃ§Ã£o_prevista}/>
</div>
<div className={estilizarDivCampo()}>
<label className={estilizarLabel(usuÃ¡rioLogado.cor_tema)}>Data de InÃ­cio*:</label>
<InputText name="data_inÃ­cio" type="date" value={dados.data_inÃ­cio}
className={estilizarInputText(erros.data_inÃ­cio, usuÃ¡rioLogado.cor_tema)}
onChange={alterarEstado}/>
<MostrarMensagemErro mensagem={erros.data_inÃ­cio}/>
</div>
<div className={estilizarDivCampo()}>
<label className={estilizarLabel(usuÃ¡rioLogado.cor_tema)}>DescriÃ§Ã£o*:</label>
<InputTextarea name="descriÃ§Ã£o" value={dados.descriÃ§Ã£o}
className={estilizarInputTextarea(erros.descriÃ§Ã£o, usuÃ¡rioLogado.cor_tema)}
onChange={alterarEstado} autoResize cols={40}/>
<MostrarMensagemErro mensagem={erros.descriÃ§Ã£o}/>
</div>
<div className={estilizarDivCampo()}>
<label className={estilizarLabel(usuÃ¡rioLogado.cor_tema)}>Concorrendo ao Contrato*:</label>
<Checkbox name="concorrendo_contrato" checked={dados.concorrendo_contrato}
className={estilizarCheckbox()} onChange={alterarEstado} autoResize/>
</div>
<div className={estilizarDivCampo()}>
<label className={estilizarLabel(usuÃ¡rioLogado.cor_tema)}>Status do Projeto*:</label>
<Dropdown name="status_projeto"
 className={estilizarDropdown(erros.status_projeto, usuÃ¡rioLogado.cor_tema)}
value={dados.status_projeto} options={opÃ§ÃµesStatusProjeto} onChange={alterarEstado}
 placeholder="-- Selecione --"/>
<MostrarMensagemErro mensagem={erros.status_projeto}/>
</div>
<Divider className={estilizarDivider()}/>
<BotÃµesAÃ§Ãµes/>
</Card>
</div>
 );
}
