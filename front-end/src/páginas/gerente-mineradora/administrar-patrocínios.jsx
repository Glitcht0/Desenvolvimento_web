import { useContext, useEffect, useRef, useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "primereact/button";
import { Card } from "primereact/card";
import { Column } from "primereact/column";
import { DataTable } from "primereact/datatable";
import { Divider } from "primereact/divider";
import { Dropdown } from "primereact/dropdown";
import { TriStateCheckbox } from "primereact/tristatecheckbox";

import ContextoGerenteMineradora from "../../contextos/contexto-gerente-mineradora";

// üî∏ Contextos

import ContextoUsu√°rio from "../../contextos/contexto-usu√°rio";

// üî∏ Servi√ßos e utilit√°rios
import { servi√ßoBuscarPatroc√≠nioGerenteMineradora } from "../../servi√ßos/servi√ßos-gerente-mineradora";
import mostrarToast from "../../utilit√°rios/mostrar-toast";
import {
  TAMANHOS,
  estilizarBot√£o,
  estilizarBot√£oRetornar,
  estilizarBot√£oTabela,
  estilizarCard,
  estilizarColunaConsultar,
  estilizarColumnHeader,
  estilizarDataTable,
  estilizarDataTablePaginator,
  estilizarDivider,
  estilizarFilterMenu,
  estilizarFlex,
  estilizarTriStateCheckbox
} from "../../utilit√°rios/estilos";

// üîπ Componente principal
export default function AdministrarPatroc√≠nios() {
  const refer√™nciaToast = useRef(null);
  const { usu√°rioLogado } = useContext(ContextoUsu√°rio);
  console.log(ContextoGerenteMineradora);
  const { patroc√≠nioConsultada, setPatroc√≠nioConsultada } = useContext(ContextoGerenteMineradora);
  const [listaPatroc√≠nios, setListaPatroc√≠nios] = useState([]);
  const navegar = useNavigate();















  // üî∏ Op√ß√µes de estilos de logo para o filtro
  const op√ß√µesEstiloLogo = [
    { label: "minimalista", value: "minimalista" },
    { label: "tipogr√°fico", value: "tipogr√°fico" },
    { label: "vintage", value: "vintage" },
    { label: "abstrato", value: "abstrato" },
    { label: "corporativo", value: "corporativo" },
    { label: "futurista", value: "futurista" },
    { label: "org√¢nico", value: "org√¢nico" },
    { label: "mascote", value: "mascote" }
  ];

  // üî∏ Retorna √† p√°gina inicial
  function retornarP√°ginaInicial() {
    navegar("/pagina-inicial");
  }

  // üî∏ Adiciona novo design de logo
  function adicionarPatroc√≠nio() {
    setPatroc√≠nioConsultada(null);
    navegar("../cadastrar-patrocinio");
  }

  // üî∏ Template para bot√£o de consulta na tabela
  function ConsultarTemplate(patroc√≠nio) {
    function consultar() {
      setPatroc√≠nioConsultada(patroc√≠nio);
      navegar("../cadastrar-patrocinio");
    }

    return (
      <Button
        icon="pi pi-search"
        className={estilizarBot√£oTabela(
          usu√°rioLogado.cor_tema,
          patroc√≠nioConsultada?.id === patroc√≠nio.id
        )}
        tooltip="Consultar DesignLogo"
        tooltipOptions={{ position: "top" }}
        onClick={consultar}
      />
    );
  }

  // üî∏ Template para filtro Dropdown (estilo da logo)
  function Dropdown√ÅreaTemplate(op√ß√µes) {
    function alterarFiltroDropdown(event) {
      return op√ß√µes.filterCallback(event.value, op√ß√µes.index);
    }

    return (
      <Dropdown
        value={op√ß√µes.value}
        options={op√ß√µesEstiloLogo}
        placeholder="Selecione"
        onChange={alterarFiltroDropdown}
        showClear
      />
    );
  }

// üî∏ Exibe ‚ÄúSim‚Äù ou ‚ÄúN√£o‚Äù na tabela conforme booleano
  function BooleanBodyTemplate(patroc√≠nio) {
    return patroc√≠nio.necessidade_bolsa ? "Sim" : "N√£o"; // <-- Mude para "necessidade_bolsa"
  }
  // üî∏ Template para filtro booleano (tri-state)
  function BooleanFilterTemplate(op√ß√µes) {
    function alterarFiltroTriState(event) {
      return op√ß√µes.filterCallback(event.value);
    }

    return (
      <div>
        <label>Concorrendo ao contrato:</label>
        <TriStateCheckbox
          className={estilizarTriStateCheckbox(usu√°rioLogado?.cor_tema)}
          value={op√ß√µes.value}
          onChange={alterarFiltroTriState}
        />
      </div>
    );
  }

  // üî∏ Busca os designs de logos do empres√°rio
  useEffect(() => {
    let desmontado = false;

    async function buscarPatroc√≠niosEmpres√°rio() {
      try {
        const response = await servi√ßoBuscarPatroc√≠nioGerenteMineradora(usu√°rioLogado.cpf);
        if (!desmontado && response.data) {
          setListaPatroc√≠nios(response.data);
        }
      } catch (error) {
        const erro = error.response.data.erro;
        if (erro) mostrarToast(refer√™nciaToast, erro, "error");
      }
    }

    buscarPatroc√≠niosEmpres√°rio();
    return () => (desmontado = true);
  }, [usu√°rioLogado.cpf]);

  // üî∏ Renderiza√ß√£o
  return (
    <div className={estilizarFlex()}>
      <Card
        title="Administrar Patroc√≠nios"
        className={estilizarCard(usu√°rioLogado.cor_tema)}
      >
        <DataTable
          dataKey="id"
          size="small"
          paginator
          rows={TAMANHOS.MAX_LINHAS_TABELA}
          emptyMessage="Nenhum patroc√≠nio encontrado."
          value={listaPatroc√≠nios}
          responsiveLayout="scroll"
          breakpoint="490px"
          removableSort
          className={estilizarDataTable()}
          paginatorClassName={estilizarDataTablePaginator(usu√°rioLogado.cor_tema)}
        >
          {/* Bot√£o de consulta */}
          <Column
            bodyClassName={estilizarColunaConsultar()}
            body={ConsultarTemplate}
            headerClassName={estilizarColumnHeader(usu√°rioLogado.cor_tema)}
          />

          {/* Coluna: Nome do Gerente */}
          <Column
            field="gerentemineradora.usu√°rio.nome" // <-- Caminho para o nome
            header="Nome do Gerente"
            filter
            showFilterOperator={false}
            headerClassName={estilizarColumnHeader(usu√°rioLogado.cor_tema)}
            sortable
          />
          
            {/* Coluna: Justificativa */}
          <Column
            field="justificativa"
            header="Justificativa"
            filter
            showFilterOperator={false}
            headerClassName={estilizarColumnHeader(usu√°rioLogado.cor_tema)}
            sortable
          />
          

          {/* Coluna: Concorrendo ao contrato */}
          <Column
            field="necessidade_bolsa" // <-- CORRETO
            header="Necessidade de Bolsa" // <-- (Opcional) Mude o t√≠tulo para ficar igual
            filter
            showFilterOperator={false}
            headerClassName={estilizarColumnHeader(usu√°rioLogado.cor_tema)}
            sortable
            filterMatchMode="equals"
            filterElement={BooleanFilterTemplate}
            body={BooleanBodyTemplate}
            showClearButton={false}
            showAddButton={false}
            filterMenuClassName={estilizarFilterMenu()}
            dataType="boolean"
          />
        </DataTable>

        <Divider className={estilizarDivider()} />

        {/* Bot√µes de a√ß√£o */}
        <Button
          className={estilizarBot√£oRetornar()}
          label="Retornar"
          onClick={retornarP√°ginaInicial}
        />
        <Button
          className={estilizarBot√£o()}
          label="Adicionar"
          onClick={adicionarPatroc√≠nio}
        />
      </Card>
    </div>
  );
}
