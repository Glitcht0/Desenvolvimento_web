import { useContext, useEffect, useRef, useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "primereact/button";
import { Card } from "primereact/card";
import { Column } from "primereact/column";
import { DataTable } from "primereact/datatable";
import { Divider } from "primereact/divider";
import { Dropdown } from "primereact/dropdown";
import { Toast } from "primereact/toast";
import { TriStateCheckbox } from "primereact/tristatecheckbox";

import ContextoUsu√°rio from "../../contextos/contexto-usu√°rio";
import ContextoGerenteTecnologia from "../../contextos/contexto-gerente-tecnologia";
import mostrarToast from "../../utilit√°rios/mostrar-toast";
import { servi√ßoBuscarParticipa√ß√µesMinera√ß√£oGerenteTecnologia } from "../../servi√ßos/servi√ßos-gerente-tecnologia";

import {
    TAMANHOS,
    estilizarBot√£o,
    estilizarBot√£oRetornar,
    estilizarBot√£oTabela,
    estilizarCard,
    estilizarColumnHeader,
    estilizarColunaConsultar,
    estilizarDataTable,
    estilizarDataTablePaginator,
    estilizarDivider,
    estilizarFilterMenu,
    estilizarFlex,
    estilizarTriStateCheckbox
} from "../../utilit√°rios/estilos";








export default function AdministrarParticipa√ß√µesMinera√ß√£o() {
    const refer√™nciaToast = useRef(null);
    const navegar = useNavigate();

    const { usu√°rioLogado } = useContext(ContextoUsu√°rio);
    const {  participa√ß√£oMinera√ß√£oConsultado, setParticipa√ß√£oMinera√ß√£oConsultado, setPatroc√≠nioSelecionada } =
        useContext(ContextoGerenteTecnologia);

    const [listaParticipa√ß√µesMinera√ß√£o, setListaParticipa√ß√µesMinera√ß√£o] = useState([]);

    // C√≥digo novo e CORRETO
    const op√ß√µesCategoria = [
        { label: "Extra√ß√£o", value: "Extra√ß√£o" },
        { label: "Explora√ß√£o", value: "Explora√ß√£o" },
        { label: "Consultoria", value: "Consultoria" },
        { label: "Pesquisa Mineral", value: "Pesquisa Mineral" }
    ];

    // Navegar para a p√°gina inicial
    function retornarP√°ginaInicial() {
        navegar("/pagina-inicial");
    }

    // Navegar para adicionar novo interesse
    function adicionarParticipa√ß√£oMinera√ß√£o() {
        setParticipa√ß√£oMinera√ß√£oConsultado(null);
        setPatroc√≠nioSelecionada(null);
        navegar("../cadastrar-participacao-mineracao");
    }

    // Bot√£o de consulta de interesse
    function ConsultarTemplate(participa√ß√£o) {
        function consultar() {
            setParticipa√ß√£oMinera√ß√£oConsultado(participa√ß√£o);
            setPatroc√≠nioSelecionada(null);
            navegar("../cadastrar-participacao-mineracao");
        }

        return (
            <Button
                icon="pi pi-search"
                className={estilizarBot√£oTabela(
                    usu√°rioLogado.cor_tema,
                    participa√ß√£oMinera√ß√£oConsultado?.id === participa√ß√£o.id
                )}
                tooltip="Consultar Participa√ß√£o Minera√ß√£o"
                tooltipOptions={{ position: 'top' }}
                onClick={consultar}
            />
        );
    }

    // Dropdown de categorias
    function Dropdown√ÅreaTemplate(op√ß√µes) {
        function alterarFiltroDropdown(event) {
            return op√ß√µes.filterCallback(event.value, op√ß√µes.index);
        }

        return (
            <Dropdown
                value={op√ß√µes.value}
                options={op√ß√µesCategoria}
                placeholder="Selecione"
                onChange={alterarFiltroDropdown}
                showClear
            />
        );
    }

    
  

    // Buscar interesses do gerente tecnologia ao carregar o componente
    useEffect(() => {
        let desmontado = false;

        async function buscarParticipa√ß√µesMinera√ß√£o() {
            try {
                console.log("[CLIENTE] üì° Buscando participa√ß√µes do CPF:", usu√°rioLogado.cpf);
                const response = await servi√ßoBuscarParticipa√ß√µesMinera√ß√£oGerenteTecnologia(usu√°rioLogado.cpf);
                
                console.log("[CLIENTE] üì• Resposta bruta da API:", response);
                console.log("[CLIENTE] üì¶ Dados recebidos (response.data):", response?.data);

                if (Array.isArray(response?.data)) {
                    console.log(`[CLIENTE] ‚úÖ ${response.data.length} participa√ß√µes recebidas`);
                } else {
                    console.warn("[CLIENTE] ‚ö†Ô∏è O retorno n√£o √© um array:", typeof response?.data);
                }

                if (!desmontado && response.data) setListaParticipa√ß√µesMinera√ß√£o(response.data);
            } catch (error) {
                console.error("[CLIENTE] ‚ùå Erro ao buscar participa√ß√µes:", error);
                mostrarToast(refer√™nciaToast, error.response?.data?.erro || "Erro desconhecido", "error");
            }
        }

        buscarParticipa√ß√µesMinera√ß√£o();
        return () => (desmontado = true);
    }, [usu√°rioLogado.cpf]);





    
    return (
        <div className={estilizarFlex()}>
            <Toast ref={refer√™nciaToast} position="bottom-center" />
            {/* Corrigido: T√≠tulo do Card */}
            <Card title="Administrar Participa√ß√µes de Minera√ß√£o" className={estilizarCard(usu√°rioLogado.cor_tema)}>
                <DataTable
                    dataKey="id"
                    size="small"
                    paginator
                    rows={TAMANHOS.MAX_LINHAS_TABELA}
                    emptyMessage="Nenhuma participa√ß√£o encontrada."
                    value={listaParticipa√ß√µesMinera√ß√£o}
                    responsiveLayout="scroll"
                    breakpoint="490px"
                    removableSort
                    className={estilizarDataTable()}
                    paginatorClassName={estilizarDataTablePaginator(usu√°rioLogado.cor_tema)}
                >
                    <Column
                        bodyClassName={estilizarColunaConsultar()}
                        body={ConsultarTemplate}
                        headerClassName={estilizarColumnHeader(usu√°rioLogado.cor_tema)}
                    />

                    {/* Campos reais conforme o backend */}
                    <Column
                        field="t√≠tulo"
                        header="T√≠tulo"
                        sortable
                        filter
                        showFilterOperator={false}
                        headerClassName={estilizarColumnHeader(usu√°rioLogado.cor_tema)}
                    />
                    <Column
                        field="√°rea_atua√ß√£o"
                        header="√Årea de Atua√ß√£o"
                        sortable
                        filter
                        showFilterOperator={false}
                        headerClassName={estilizarColumnHeader(usu√°rioLogado.cor_tema)}
                    />
                    <Column
                        field="data_in√≠cio"
                        header="Data de In√≠cio"
                        sortable
                        headerClassName={estilizarColumnHeader(usu√°rioLogado.cor_tema)}
                        body={(rowData) => new Date(rowData.data_in√≠cio).toLocaleDateString()}
                    />
                    <Column
                        field="descri√ß√£o"
                        header="Descri√ß√£o"
                        sortable
                        headerClassName={estilizarColumnHeader(usu√°rioLogado.cor_tema)}
                    />
                </DataTable>

                <Divider className={estilizarDivider()} />
                <Button
                    className={estilizarBot√£oRetornar()}
                    label="Retornar"
                    onClick={retornarP√°ginaInicial}
                />
                <Button
                    className={estilizarBot√£o()}
                    label="Adicionar"
                    onClick={adicionarParticipa√ß√£oMinera√ß√£o}
                />
            </Card>
        </div>
    );
}
